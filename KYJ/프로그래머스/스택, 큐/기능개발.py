# 프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.
# 또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 
# 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다. 먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 
# 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

# 제한사항

# 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
# 작업 진도는 100 미만의 자연수입니다.
# 작업 속도는 100 이하의 자연수입니다.
# 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 
# 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.

# 입출력 예

# progresses	            speeds	            return
# [93, 30, 55]	            [1, 30, 5]	        [2, 1]
# [95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]

# 입출력 예 #1
# 첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
# 두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 
# 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
# 세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.
# 따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

# 입출력 예 #2
# 모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 
# 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.
# 따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

def solution(progresses, speeds):
    answer = []
    while progresses:
        for i in range(len(progresses)): # speeds[i]만큼 progresses[i]에 누적
            progresses[i] += speeds[i]
        cnt = 0
        while progresses and progresses[0] >= 100: # progresses[0] 번째가 배포 준비가 완성되면 
            progresses.pop(0)
            speeds.pop(0)
            cnt += 1

        if cnt !=0:
            answer.append(cnt)
    return answer

# 이 문제의 핵심은 첫번째 기능이 완성되지 않았다면 이후 기능들이 완성되었더라도 배포가 불가능하다는 점이다.
# 따라서, 결국 progresses 배열은 우선순위에 따라 입력된것이기 떄문에 첫번째 원소가 첫번째로 나가야 한다.
# 즉 이 성질은 Queue의 FIFO (First In First Out)를 이용하여 풀수 있다.

# 풀이는 다음과 같다.
#       1. progresses 내 기능을 모두 배포할 때까지 반복한다.
#       2. 각 반복마다 progresses[i] += speeds[i] 를 통해 당일 작업량을 더해준다.
#       3. 만일, progresses[0]의 배포 준비가 완성되면 여태까지 배포가 완성된 기능들을 while문을 통해 카운팅해준다.
#       4. cnt 값이 0이 아닐경우, 이를 answer 배열에 넣는다.
#       5. 위 내용을 반복하여 모든 progresses 배열 내 기능들이 pop되면 answr 배열을 반환한다.

# 모범답안

# def solution(progresses, speeds):
#     Q=[]
#     for p, s in zip(progresses, speeds):
#         if len(Q)==0 or Q[-1][0]<-((p-100)//s):
#             Q.append([-((p-100)//s),1])
#         else:
#             Q[-1][1]+=1
#     return [q[1] for q in Q]