# 문제

# 곱하기 혹은 더하기 (기출 : 2019 국가 교육기관 코딩 테스트 ) ## (난이도 : 1/3 , 풀이시간 : 30분, 시간제한 : 1초)

# 각 자리의 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때,
# 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 'x' 혹은 '+' 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요.
# 단 +보다 x를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.
# 예를 들어 02984 라는 문자열로 만들 수 있는 가장 큰 수는 ((((0+2) x 9) x 8) x 4) = 576 입니다.

# 입력 조건 : 첫째 줄에 여러 개의 숫자로 구성된 하나의 문자열 S가 주어집니다. (1 =< S의 길이 =<20)
# 출력 조건 : 첫째 줄에 만들어질 수 있는 가장 큰 수를 출력합니다.

# 문제 해결 아이디어 :
# 기호 (+,x) 에 상관없이 무조건 왼쪽부터 연산을 하므로
# 대부분의 경우 '+' 보다는 'x'가 더 값을 크게 만듭니다. ex) 5+6 = 11 , 5x6 = 30
# 다만 두 수 중에서 하나라도 '0' 혹은 '1'인 경우, 곱하기보다는 더하기를 수행하는 것이 효율적입니다. << 이부분이 이 문제의 핵심
# 따라서 두 수에 대하여 연산을 수행할 때, 두 수 중에서 하나라도 1이하인 경우에는 더하며, 두수가 모두 2이상인 경우에는 곱하면 정답입니다.

# ---------------------------------------------------------------------------------------------------------------------------
# 풀이1 (Python)

# 0부터 9로 이루어진 문자열 s
s = input()

# 첫 번째 문자를 숫자로 변경하여 대입
result = int(s[0])

# 문자의 길이만큼 돌면서
for i in range(1, len(s)):
    # 두 수 중에서 하나라도 '0' 혹은 '1'인 경우, 곱하기보다는 더하기 수행, 아닐경우 곱하기 수행
    num = int(s[i])
    if num <= 1 or result <= 1:
        result += num
    else:
        result *= num

# 출력
print(result)
