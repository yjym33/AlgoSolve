# 수 묶기                       정답률 : 26.804%

# 길이가 N인 수열이 주어졌을 때, 그 수열의 합을 구하려고 한다. 하지만, 그냥 그 수열의 합을 모두 더해서 구하는 것이 아니라, 수열의 두 수를 묶으려고 한다.
# 어떤 수를 묶으려고 할 때, 위치에 상관없이 묶을 수 있다. 하지만, 같은 위치에 있는 수(자기 자신)를 묶는 것은 불가능하다.
# 그리고 어떤 수를 묶게 되면, 수열의 합을 구할 때 묶은 수는 서로 곱한 후에 더한다.
# 예를 들면, 어떤 수열이 {0, 1, 2, 4, 3, 5}일 때, 그냥 이 수열의 합을 구하면 0+1+2+4+3+5 = 15이다.
# 하지만, 2와 3을 묶고, 4와 5를 묶게 되면, 0+1+(2*3)+(4*5) = 27이 되어 최대가 된다.
# 수열의 모든 수는 단 한번만 묶거나, 아니면 묶지 않아야한다.
# 수열이 주어졌을 때, 수열의 각 수를 적절히 묶었을 때, 그 합이 최대가 되게 하는 프로그램을 작성하시오.

# 입력

# 첫째 줄에 수열의 크기 N이 주어진다. N은 10,000보다 작은 자연수이다. 둘째 줄부터 N개의 줄에, 수열의 각 수가 주어진다.
# 수열의 수는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 정수이다.

# 출력

# 수를 합이 최대가 나오게 묶었을 때 합을 출력한다. 정답은 항상 231보다 작다.

# 예제 입력 1                                      예제 출력 1

# 4                                              6
# -1
# 2
# 1
# 3

# 문제 풀기전 생각해야 할 것-------------------------------------------------------------------------------------------------

# (어떻게 묶어야 값이 커지는 지를 파악해야 한다.)
# ex) [-3, -2, 0, 1, 2, 3] 이라는 숫자가 있다면,
# (-3) * (-2), 0, 1, (2*3) 으로 만들고 더해주면 가장 큰 값인 13을 갖는다.

# 이 논리를 정리하면 다음과 같다.

# 1) 음수는 작은 수 끼리 묶는다.
# 2) 양수는 큰수 끼리 묶는다.
# 3) 0은 더하나 마나이므로 제외

# 하지만 위의 논리에서도 예외가 있다.
# ex) [1, 1, 1, 1] 일 경우 (1 * 1) + (1 * 1) = 2 이지만
# 위의 예시에서 가장 큰 값을 가질수 있는 경우는 4이다. (더하지 않았을 경우)

# 즉 위의 조건에서
# 4) 숫자가 1인 경우는 묶지 않는다. 라는 조건이 들어가야한다.

# 그리고 마지막으로 또다른 예외가 있는데
# ex) [-1, 0] 일 경우 위의 정의한 알고리즘 대로면 -1을 반환해야 하지만, (-1 * 0 ) = 0 이므로 0 이 정답이 된다.
# 즉, 0은 음수쪽에 가이 묶어주는 것으로 해결해야 한다.

# 따라서 [최종 조건]은

# 1) 0을 포함한 음수는 작은 수부터 묶는다.
# 2) 1보다 큰 수는 큰 수부터 묶는다.
# 3) 숫자가 1인 경우 묶지 않는다.

# 풀이 ----------------------------------------------------------------------------------------------------------------

import sys
N = int(sys.stdin.readline())
num = [int(sys.stdin.readline() for _ in range(N))]

negative, positive = []
ans = 0

for num in nums:
    if num <= 0:
        negative.append(num)  # 0 이거나 음수인 경우 negative의 원소로 둔다.
    elif num == 1:
        ans += 1    # 1일 떄는 묶지 않으므로, 미리 계산하여 둔다.
    elif num > 1:
        positive.append(num)  # 양수일때는 positive의 원소로 둔다.

# 목적에 맞게 정렬한다.
negative.sort()
positive.sort(reverse=True)

# 1) 작은 수부터 차례대로 묶는다.
for i in range(0, len(negative), 2):
    if i+1 < len(negative):
        ans += negative[i] * negative[i+1]
    else:
        ans += negative[i]

# 2) 큰 수부터 차례대로 묶는다.
for i in range(0, len(positive), 2):
    if i+1 < len(positive):
        ans += positive[i] * positive[i+1]
    else:
        ans += positive[i]

print(ans)
