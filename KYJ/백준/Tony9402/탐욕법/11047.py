# 문제 번호 : 11047번, 문제 유형 : 그리디 알고리즘, 정답률 : 53.751%

# 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.

# 동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.

# 입력 : 첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)

#       둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)

# 출력 : 첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.

# 예제 입력 : 10 4200                             예제 출력 : 6
#            1
#            5
#            10
#            50
#            100
#            500
#            1000
#            5000
#            10000
#            50000

# 예제 입력 2 : 10 4790                             예제 출력 : 12
#             1
#             5
#             10
#             50
#             100
#             500
#             1000
#             5000
#             10000
#             50000

# 풀이 : ----------------------------------------------------------------------

# 입력 받기
N, K = map(int, input().split())  # N: 동전의 종류, K : 가치의 합
coins = [int(input()) for _ in range(N)]

# 최소 동전 개수 구하기
coin_num = 0

for i in range(1, N+1):
    # 인덱스 끝부터 순회 : 마이너스 인덱스
    coin = coins[-i]

    if K >= coin:
        num = K//coin
        K -= coin*num
        coin_num += num

print(coin_num)

# 이 문제는 최소의 동전 개수를 찾아야 하는 문제이다.
# 예제에 나온 것처럼 4,200원일 경우에 1,000원 4개 100원 2개로 하여 총 6개가 나온다.
# 그리하여 큰 값을 가진 것부터 나누어 구하면 된다.


# n, k = map(int, input().split())
# m = []
# num = 0
# for i in range(n):
#     m.append(int(input()))
# for i in range(n-1, -1, -1):
#     if k == 0:
#         break
#     if m[i] > k:
#         continue
#     num += k // m[i]
#     k %= m[i]

# print(num)
