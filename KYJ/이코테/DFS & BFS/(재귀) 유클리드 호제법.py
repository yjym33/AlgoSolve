# 두 개의 자연수에 대한 최대공약수를 구하는 대표적인 알고리즘으로는 유클리드 호제법이 있습니다. (재귀함수의 대표적인 예제)

# 유클리드 호제법
    # 두 자연수 A, B에 대하여 (A>B) A를 B로 나눈 나머지를 R이라고 합시다.
    # 이때 A와 B의 최대공약수는 B와 R의 최대공약수와 같습니다.

# 유클리드 호제법의 아이디어를 그대로 재귀 함수로 작성할 수 있습니다.
    # 예시 GCD(192, 162)

#               A                   B
#  단계                        
#   1          192                 162
#   2          162                  30
#   3           30                  12
#   4           12                   6

def gcd(a, b):
    if a % b == 0:
        return b
    else:
        return gcd(b, a % b)

print(gcd(192, 162))

# 재귀 함수 사용의 유의 사항

#  - 재귀 함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성할 수 있습니다.
#    단, 오히려 다른 사람이 이해하기 어려운 형태의 코드가 될 수도 있으므로 신중하게 사용해야 합니다.
#  모든 재귀 함수는 반복문을 이용하여 동일한 기능을 구현할 수 있습니다.
#  재귀 함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있습니다.
#  컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모미 내부의 스택 프레임에 쌓입니다.
#    - 그래서 스택을 사용해야 할 때 구현상 스택 라이브러리 대신에 재귀 함수를 이용하는 경우가 많습니다.
